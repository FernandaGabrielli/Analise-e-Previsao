# -*- coding: utf-8 -*-
"""analiseprevisaoVendas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e-1jKordw0m-SrZ0eE4F9xzYqwhuDuzb

##    Análise de Desempenho de Vendas e Calculadora de Previsão de Vendas
O objetivo deste projeto é fornecer ferramentas para analisar o desempenho de vendas históricas e prever vendas futuras com base em dados passados. A análise de desempenho ajuda a identificar tendências, pontos fortes e áreas de melhoria, enquanto a calculadora de previsão de vendas utiliza algoritmos para estimar vendas futuras, auxiliando na tomada de decisões estratégicas.
"""

!pip install pandas numpy scikit-learn matplotlib seaborn

"""###Importando as bibliotecas"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import random

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV

"""###Criar o conjunto de dados

"""

# Gerar o dataframe com dados de vendas para 36 meses com tendência e sazonalidade
np.random.seed(42)
months = pd.date_range('2021-01-01', periods=36, freq='M')
sales = [random.randint(150, 500) + (i%12)*20 + (i//12)*100 for i in range(36)]  # Com tendência e sazonalidade

df = pd.DataFrame({
    'date': months,
    'sales': sales
})

# Criar colunas de características temporais
df['year'] = df['date'].dt.year
df['month'] = df['date'].dt.month
df['day_of_week'] = df['date'].dt.dayofweek
df['quarter'] = df['date'].dt.quarter
df['year_month'] = df['date'].dt.year * 12 + df['date'].dt.month

# Visualizar as primeiras linhas
print(df.head())

"""##### Data Exploration e visualização"""

df.info()
df.describe()

plt.figure(figsize=(12, 5)) #Lagura 12, altura 5
sns.lineplot(x=df['date'], y=df['sales'], marker='o') #criar um graf de linha c/ os dados de vendas
plt.title("Sales trend over time") #titutlop
plt.xlabel("Date") # nome do eixo
plt.ylabel("Number of Sales")
plt.grid(True) #adc grade p facilitar a visualização
plt.show()

"""####Preparar a data p/ treinar o modelo"""



"""##### Treinar p modelos de predicao"""

X = df[['year', 'month', 'day_of_week', 'quarter', 'year_month']]  # Features
y = df['sales']  # Target


# Dividir os dados 80/20 sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

#verificar os coeficientes

print(f"Intercept: {model.intercept_}")
print(f"Coefficients: {model.coef_}")

# Ajustando os parâmetros do Random Forest
rf_model = RandomForestRegressor(n_estimators=300, max_depth=15, random_state=42)
rf_model.fit(X_train, y_train)

# Fazer previsões no conjunto de teste
y_pred = rf_model.predict(X_test)

# Avaliar a performance do modelo
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'MAE: {mae:.2f}')
print(f'MSE: {mse:.2f}')
print(f'R²: {r2:.2f}')

def predict_sales(year, month, day_of_week, quarter, year_month):
    input_data = pd.DataFrame([[year, month, day_of_week, quarter, year_month]],
                              columns=['year', 'month', 'day_of_week', 'quarter', 'year_month'])
    prediction = rf_model.predict(input_data)
    return round(scaler.inverse_transform(prediction.reshape(-1, 1))[0][0], 2)

test_year = 2024
test_month = 6
day_of_week = 0
quarter = 2
year_month = test_year * 12 + test_month
forecast = predict_sales(test_year, test_month, day_of_week, quarter, year_month)
print(f"Predicted sales for {test_month}/{test_year}: {forecast:.2f}")

"""#Aprendizado

Consegui gerar dados de forma consistente
Usei corretamente  as métricas
Predict_sales funcinou bem

Erros:
O modelo escolhido nao foi o melhor, o que resultou num resultado que nao dava um feat. Para essa situacao era extremamente necessario sazonalidade/ tendencia logo usando o RandomForestRegressor.
"""